
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense

# Example data
X = np.random.rand(10, 4)  # 10 data points, 4 features
y_class = np.random.randint(0, 2, 10)  # Binary classification target
y_reg = np.random.rand(10)  # Regression target

# Input layer
input_layer = Input(shape=(4,))

# Shared layers
shared = Dense(64, activation='relu')(input_layer)
shared = Dense(32, activation='relu')(shared)

# Classification output
class_output = Dense(1, activation='sigmoid', name='class_output')(shared)

# Regression output
reg_output = Dense(1, name='reg_output')(shared)

# Define the model
model = Model(inputs=input_layer, outputs=[class_output, reg_output])

# Compile the model
model.compile(optimizer='adam',
              loss={'class_output': 'binary_crossentropy', 'reg_output': 'mse'},
              metrics={'class_output': 'accuracy', 'reg_output': 'mse'})

# Summary of the model
model.summary()

# Train the model
model.fit(X, {'class_output': y_class, 'reg_output': y_reg}, epochs=50, batch_size=2)

# Evaluate the model
loss, class_loss, reg_loss, class_acc, reg_mse = model.evaluate(X, {'class_output': y_class, 'reg_output': y_reg})
print(f"Loss: {loss}, Classification Loss: {class_loss}, Regression Loss: {reg_loss}, Classification Accuracy: {class_acc}, Regression MSE: {reg_mse}")

# Make predictions
predictions = model.predict(X)
class_predictions = predictions[0]
reg_predictions = predictions[1]

print(f"Classification Predictions: {class_predictions}")
print(f"Regression Predictions: {reg_predictions}")
